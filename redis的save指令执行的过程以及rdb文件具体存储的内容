以下内容基于redis3.0
----------------------------------------------
redis的save指令是把当前内存的内容以一定的格式写入文件，redis可以通过load文件重新读取内容加载到内存，不至于数据丢失，save指令是阻塞的（我们可以通过测试发现save不执行完，其他指令例如get是无法执行的），
相对save的还有bgsave指令，后期我也将介绍bgsave指令是怎么执行的。

save指令实行的是以下方法：
/* Save the DB on disk. Return REDIS_ERR on error, REDIS_OK on success 
 *
 * 将数据库保存到磁盘上。
 *
 * 保存成功返回 REDIS_OK ，出错/失败返回 REDIS_ERR 。
 */
int rdbSave(char *filename)

方法开始做一些常规操作，比如创建文件，初始化IO这样的操作。

// 设置校验和函数
if (server.rdb_checksum)
    rdb.update_cksum = rioGenericUpdateChecksum;
校验函数是指所有内容用一个算法计算出一个结果，redis这里会计算出一个8个字节的校验和，这里有点像MD5，把整个文件内容生成一个MD5值，我有时间会整理校验函数的实现。

写入版本号，这里用REDIS0006表示（redis3.0是0006）

接下来是循环下入每个redis数据库，redis默认创建了16个数据库，如果不指定选择哪个数据库，系统采用0号数据库保存内容。
具体怎么写入数据库，我们后面介绍，我们来看没有任何数据的情况。

接下来写入结束标记
if (rdbSaveType(&rdb,REDIS_RDB_OPCODE_EOF) == -1) goto werr;
再写入8个字节的校验和
cksum = rdb.cksum;
memrev64ifbe(&cksum);
rioWrite(&rdb,&cksum,8);

最后冲洗缓存，保存文件，改名等。
--------------------------
我们来看看没有任何内容的rdb文件是什么样的。
当我们执行如下命令：od -c dump.rdb，获得下面这些内容：

0000000    R   E   D   I   S   0   0   0   6 377   ܳ  **   C 360   Z 362
0000020  362   V                                                        
0000022

前面9个字节代表rdb文件的redis版本号：redis0006
接下来一个字节是337，代表数据库的结束标记
后面8个字节是校验和，校验和是读取的时候用于计算数据库内容有没有被修改或者数据内容是否完整。

我们另外看一个情况，当我们执行 set key value的时候rdb内容是什么样的。
继续执行od -c dump.rdb指令，获得如下内容：

0000000    R   E   D   I   S   0   0   0   6 376  \0  \0 003   k   e   y
0000020  005   v   a   l   u   e 377     322   W   A 376 205 237 176    
0000037

这里跟空数据库不同的是从376开始到value结束的部分，这其中：
376：代表选择数据库，由如下执行执行：if (rdbSaveType(&rdb,REDIS_RDB_OPCODE_SELECTDB) == -1) goto werr;
\0：表示选择了0号数据库
\0 003 k e y 005 v a l u e，这个我们分解来看
  最前面的0表示数据类型，这是表示value的类型为“REDIS_RDB_TYPE_STRING”类型，它与内存数据的类型“REDIS_STRING”相对应。
  003表示接下来的（k，v）的key需要读取3个字节。
  k e y：表示（k，v）的k的具体值。
  005表示“REDIS_RDB_TYPE_STRING”类型的value需要读取5个字节，这里表示为字符串，也就是“value”。
  

############华丽的分界线############################################################
下面我们来看看有数据的情况下是怎么写入的。



-------------------------------------------------------------
2020年7月4日整理于杭州
--fancie
